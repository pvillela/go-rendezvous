package rdv

import (
	"context"

	"github.com/pvillela/go-trygo2/util"
	"golang.org/x/sync/errgroup"
)

/////////////////////
// Unit

// Unit is a type alias
type Unit = struct{}

/////////////////////
// ResultWithError

// ResultWithError encapsulates a normal result value and an error.
type ResultWithError[T any] struct {
	Value T
	Error error
}

/////////////////////
// Rdv

// RdvData is the data structure used by Rdv channels.
type RdvData[T any] struct {
	Value    T
	Error    error
	ChanOpen bool
}

// Rdv encapsulates a channel used for a function launched as a goroutine to rendezvous
// with the user of the function's results.
type Rdv[T any] struct {
	Ch chan RdvData[T]
}

// Receive waits on the receiver and returns the results of the asynchronous computation for
// which the receiver was created (see Go and GoEg).
// This function may only be called once.
func (rv Rdv[T]) Receive() (T, error) {
	data := <-rv.Ch
	if !data.ChanOpen {
		panic("attempt to get data from closed rendezvous channel")
	}
	return data.Value, data.Error
}

// ReceiveCtx waits on the receiver and watches the context ctx for cancellation or timeout.
// If ctx is not cancelled or times-out, this function returns the results of the asynchronous
// computation for which the receiver was created (see Go and GoEg).
// Otherwise, this function returns early with a TimeoutError or CancellationError.
// This function may only be called once.
func (rv Rdv[T]) ReceiveCtx(ctx context.Context) (T, error) {
	data := RdvData[T]{}
	select {
	case data = <-rv.Ch:
		if !data.ChanOpen {
			panic("attempt to get data from closed rendezvous channel")
		}
	case <-ctx.Done():
		data.Error = ctx.Err()
	}
	return data.Value, data.Error
}

// Go launches f as an asynchronous computation in a goroutine and returns an Rdv instance
// to be used to retrieve the results of the computation.
func Go[T any](f func() (T, error)) Rdv[T] {
	rv := Rdv[T]{make(chan RdvData[T], 1)}
	go func() {
		defer close(rv.Ch)
		fs := util.SafeFunc0E(f)
		res, err := fs()
		data := RdvData[T]{res, err, true}
		rv.Ch <- data
	}()
	return rv
}

// GoEg launches f as an asynchronous computation in a goroutine associated with the
// errgroup.Group eg and returns an Rdv instance to be used to retrieve the results of
// the computation.
func GoEg[T any](eg *errgroup.Group, f func() (T, error)) Rdv[T] {
	rv := Rdv[T]{make(chan RdvData[T], 1)}
	eg.Go(func() error {
		defer close(rv.Ch)
		fs := util.SafeFunc0E(f)
		res, err := fs()
		data := RdvData[T]{res, err, true}
		rv.Ch <- data
		return err
	})
	return rv
}
